package io.springmvc.springmvcmaster.controller;import io.springmvc.springmvcmaster.model.User;import jakarta.servlet.http.HttpSession;import org.springframework.web.bind.annotation.*;import org.springframework.web.bind.support.SessionStatus;import java.util.HashMap;import java.util.Map;@RestController@RequestMapping("/user")public class UserSessionController {    // ✅ 초기 진입 → 세션에 유저 저장 + 응답 반환    @GetMapping("")    public Map<String, Object> initSession(HttpSession session) {        User user = new User("springmvc", "a@a.com");        session.setAttribute("user", user);        Map<String, Object> response = new HashMap<>();        response.put("user", user);        return response;    }    // ✅ 유저 조회 (세션에 있는 경우만)    @GetMapping("/filter")    public Map<String, Object> getUser(HttpSession session) {        Map<String, Object> response = new HashMap<>();        User user = (User) session.getAttribute("user");        response.put("user", user); // null 포함해 반환        return response;    }    // ✅ 유저 없을 때 메시지 전송    @GetMapping("/notFound")    public Map<String, Object> userNotFound(HttpSession session) {        User user = (User) session.getAttribute("user");        Map<String, Object> response = new HashMap<>();        response.put("message", user == null ? "User not found" : "User found");        response.put("user", user);        return response;    }    // ✅ 세션 클리어 처리    @PostMapping("/session/clear")    public Map<String, Object> clearSession(SessionStatus sessionStatus, HttpSession session) {        sessionStatus.setComplete(); // Spring 세션 종료 (form 기반에서만 유효)        User user = (User) session.getAttribute("user");        session.removeAttribute("user");        Map<String, Object> response = new HashMap<>();        response.put("clearedUser", user); // 이전에 있던 값도 같이 리턴        response.put("message", "Session cleared");        return response;    }    // ✅ 폼 요청 → 초기 응답 (이제 뷰 대신 JSON)    @GetMapping("/form")    public Map<String, Object> showForm(HttpSession session) {        User user = (User) session.getAttribute("user");        Map<String, Object> response = new HashMap<>();        response.put("userInSession", user);        response.put("formAvailable", true);        return response;    }}